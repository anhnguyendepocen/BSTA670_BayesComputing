points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
set.seed(1)
sim_dat <-function(n=30, corr_beta=0){
n <- 30
x0 <- rnorm(n, 0, 10)
x1 <- rnorm(n, 0 + 1*x0, 10)
x <- cbind(x0, x1)
tb <- matrix(c(10,20), ncol=1)
y <- rnorm(n, x %*% tb, 1)
return(list(x0,x1, x, y))
}
vb_approx <- function( x0, x1, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu, lambda=lambda0, lambda1))
}
plot_function <-function(mu, post_mean, post_cov){
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
d<-sim_dat()
library(mixtools)
# -------------------           Helper Functions                   ------------#
## simulate data with different correlations
sim_dat <-function(n=30, corr_beta=0){
n <- 30
x0 <- rnorm(n, 0, 10)
x1 <- rnorm(n, 0 + 1*x0, 10)
x <- cbind(x0, x1)
tb <- matrix(c(10,20), ncol=1)
y <- rnorm(n, x %*% tb, 1)
return(list(x0,x1, x, y))
}
## do variational approximation with coordinate ascent
vb_approx <- function( x0, x1, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu, lambda=lambda0, lambda1))
}
plot_function <-function(mu, post_mean, post_cov){
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
# -------------------           Helper Functions                   ------------#
set.seed(1)
phi <- 10
tau <- 1
d<-sim_dat()
d<-sim_dat()
# -------------------           Helper Functions                   ------------#
## simulate data with different correlations
sim_dat <-function(n=30, corr_beta=0){
n <- 30
x0 <- rnorm(n, 0, 10)
x1 <- rnorm(n, 0 + 1*x0, 10)
x <- cbind(x0, x1)
tb <- matrix(c(10,20), ncol=1)
y <- rnorm(n, x %*% tb, 1)
return(list(x0=x0,x1=x1, x=x, y=y))
}
## do variational approximation with coordinate ascent
vb_approx <- function( x0, x1, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu=mu, lambda=c(lambda0, lambda1) ))
}
plot_function <-function(mu, post_mean, post_cov){
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
d<-sim_dat()
vb_res <- vb_approx(d$x0,d$x1,phi, tau, iter=50)
vb_res <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
vb_approx <- function( x0, x1, y, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu=mu, lambda=c(lambda0, lambda1) ))
}
vb_res <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
library(mvtnorm)
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
plot_function(vb_res$mu,vb_res$lambda[1], vb_res$lambda[2],post_mean, post_cov)
phi <- 10
tau <- 1
xtx <- t(x) %*% x
xty  <- t(x) %*% y
Imat <- diag(2)
exact_res <- function(x, y, phi, tau){
xtx <- t(x) %*% x
xty  <- t(x) %*% y
Imat <- diag(2)
post_cov <- solve(Imat + (1/phi) * xtx)
post_mean <- post_cov %*% ((1/phi) * xty)
return(list(post_mean=post_mean, post_cov=post_cov))
}
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
exact <- exact_res(d$x, d$y, phi, tau)
d<-sim_dat()
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
exact <- exact_res(d$x, d$y, phi, tau)
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,ncol(mu)], mu[2,ncol(mu)], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
# -------------------           Helper Functions                   ------------#
set.seed(1)
phi <- 10
tau <- 1
d<-sim_dat()
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
exact <- exact_res(d$x, d$y, phi, tau)
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
iter<-ncol(mu)
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
# -------------------           Helper Functions                   ------------#
set.seed(1)
phi <- 10
tau <- 1
d<-sim_dat()
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
exact <- exact_res(d$x, d$y, phi, tau)
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
iter<-ncol(mu)
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
# -------------------           Helper Functions                   ------------#
set.seed(1)
phi <- 10
tau <- 1
d<-sim_dat()
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50)
exact <- exact_res(d$x, d$y, phi, tau)
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
## simulate data with different correlations
sim_dat <-function(n=30, corr_beta=0){
x0 <- rnorm(n, 0, 10)
x1 <- rnorm(n, 0 + corr_beta*x0, 10)
x <- cbind(x0, x1)
tb <- matrix(c(10,20), ncol=1)
y <- rnorm(n, x %*% tb, 1)
return(list(x0=x0,x1=x1, x=x, y=y))
}
## do variational approximation with coordinate ascent
vb_approx <- function( x0, x1, y, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu=mu, lambda=c(lambda0, lambda1) ))
}
exact_res <- function(x, y, phi, tau){
xtx <- t(x) %*% x
xty  <- t(x) %*% y
Imat <- diag(2)
post_cov <- solve(Imat + (1/phi) * xtx)
post_mean <- post_cov %*% ((1/phi) * xty)
return(list(post_mean=post_mean, post_cov=post_cov))
}
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
iter<-ncol(mu)
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
# -------------------           Helper Functions                   ------------#
set.seed(1)
phi <- 10
tau <- 1
### No correlation
d<-sim_dat() # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
# plot results
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
par(mfrow=c(2,2))
corr_vec <- c(0, 1/3, 2/3, 1)
set.seed(1)
phi <- 10
tau <- 1
par(mfrow=c(2,2))
corr_vec <- c(0, 1/3, 2/3, 1)
for(i in corr_vec){
d<-sim_dat(corr_beta = i) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
# plot results
plot_function(vb$mu,vb$lambda[1], vb$lambda[2], exact$post_mean, exact$post_cov)
}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(RefManageR)
library(kableExtra)
library(dplyr)
library(mixtools)
library(mvtnorm)
#BibOptions(check.entries = FALSE, bib.style = "numeric", style = "markdown",
#           dashed = TRUE)
#file.name <- system.file("Bib", "biblatexExamples.bib", package = "RefManageR")
#bib <- ReadBib("bibliography.bib")
d<-sim_dat(corr_beta = i) # simulate data
set.seed(1)
d<-sim_dat(corr_beta = i) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
plot(exact$post_mean[1], exact$post_mean[2], col='red', pch=20)
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
plot(exact$post_mean[1], exact$post_mean[2], col='red', pch=20)
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .05, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .25, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .5, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .75, col='red')
eps <-.5
set.seed(1)
d<-sim_dat(corr_beta = i) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .05, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .25, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .5, col='red')
ellipse(as.numeric(exact$post_mean), exact$post_cov, alpha = .75, col='red')
eps <-.5
set.seed(1)
d<-sim_dat(corr_beta = 0) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
## simulate data with different correlations
sim_dat <-function(n=30, corr_beta=0){
x0 <- rnorm(n, 0, 10)
x1 <- rnorm(n, 0 + corr_beta*x0, 10)
x <- cbind(x0, x1)
tb <- matrix(c(10,20), ncol=1)
y <- rnorm(n, x %*% tb, 1)
return(list(x0=x0,x1=x1, x=x, y=y))
}
## do variational approximation with coordinate ascent
vb_approx <- function( x0, x1, y, phi, tau, iter=50 ){
mu <- matrix(nrow=2, ncol=iter)
mu[,1] <- c(0,0)
lambda0 <- (phi / ( sum(x0^2) + phi/tau) )
lambda1 <- (phi / ( sum(x1^2) + phi/tau) )
for(i in 2:iter){
## update mu0
mu[1, i] = ( sum(x0*y) - mu[2,i-1]*sum(x1*x0)  )/( sum(x0^2) + phi/tau )
## update mu1
mu[2, i] = ( sum(x1*y) - mu[1,i]*sum(x1*x0)  )/( sum(x1^2) + phi/tau )
}
return(list(mu=mu, lambda=c(lambda0, lambda1) ))
}
exact_res <- function(x, y, phi, tau){
xtx <- t(x) %*% x
xty  <- t(x) %*% y
Imat <- diag(2)
post_cov <- solve(Imat + (1/phi) * xtx)
post_mean <- post_cov %*% ((1/phi) * xty)
return(list(post_mean=post_mean, post_cov=post_cov))
}
plot_function <-function(mu,lambda0, lambda1,  post_mean, post_cov){
iter<-ncol(mu)
eps <- .5
plot(c(0), xlim=c(10-eps,10+eps), ylim=c(20-eps,20+eps),
xlab='theta0', ylab='theta1')
## gibbs chain eventually converges to this exactly:
gibbs_equlib_draws <- mvtnorm::rmvnorm(50, post_mean, post_cov)
points(gibbs_equlib_draws, col='purple', pch=20 )
# plot exact posterior contours
ellipse(as.numeric(post_mean), post_cov, alpha = .25, col='red')
ellipse(as.numeric(post_mean), post_cov, alpha = .5, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .75, col='red',lwd=1)
ellipse(as.numeric(post_mean), post_cov, alpha = .05, col='red',lwd=1)
points(post_mean[1], post_mean[2], col='red', pch=20)
# plot variational approximate contours
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .25, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .5, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .75, col='black')
ellipse( c(mu[, iter]) , diag(c(lambda0,lambda1)) ,alpha = .05, col='black')
points(mu[1,iter], mu[2,iter], col='black', pch=20)
legend('topright',
legend=c( 'VB Approximation','Exact Posterior', 'Gibbs Draws'),
lty=c(1,1,NA), pch=c(NA,NA,20), col=c('black','red','purple') )
}
eps <-.5
set.seed(1)
d<-sim_dat(corr_beta = 0) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
eps <-.5
phi <- 10
tau <- 1
set.seed(1)
d<-sim_dat(corr_beta = 0) # simulate data
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
vb <- vb_approx(d$x0,d$x1, d$y, phi, tau, iter=50) # run mean-field VB
exact <- exact_res(d$x, d$y, phi, tau) # compute exact posterior
exact$post_cov
diag(c(vb$lambda0,vb$lambda1))
vb$lambda0
vb$mu[,1]
vb$mu[,2]

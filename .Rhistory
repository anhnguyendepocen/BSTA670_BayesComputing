options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(RefManageR)
library(kableExtra)
library(dplyr)
#BibOptions(check.entries = FALSE, bib.style = "numeric", style = "markdown",
#           dashed = TRUE)
#file.name <- system.file("Bib", "biblatexExamples.bib", package = "RefManageR")
#bib <- ReadBib("bibliography.bib")
theta2
1:(i-1)
1:(5-1)
exp(.4)
exp(-1)
set.seed(111)
## simulate data
n <- 10000
X <- cbind(1, rnorm(n))
y <- X %*% matrix(c(10,10), ncol=1) + rnorm(n,0, 10)
iter <- 1000
## create shells to store Gibbs draws
phi <- numeric(length = iter)
beta <- matrix(NA, ncol=iter, nrow = ncol(X) )
## initialize
phi[1] <- 90
## pre-compute some quantities
xtx <- t(X) %*% X
xty  <- t(X) %*% y
Imat <- diag(ncol(X))
for( i in 2:iter){
post_cov <- solve(Imat + (1/phi[i-1]) * xtx)
post_mean <- post_cov %*% ((1/phi[i-1]) * t(X) %*% y)
beta[, i]  <- MASS::mvrnorm(1, post_mean , post_cov )
post_rate <- 100 + .5*sum((y - X %*% beta[, i, drop=F])^2)
post_shape <- 5 + n/2
phi[i] <- invgamma::rinvgamma(1, post_shape, rate = post_rate)
}
plot(beta[1,],beta[2,])
install.packages('mixtools')
library(mixtools)
cov(t(beta))
cov(t(beta[,2:1000]))
plot(beta[1,],beta[2,])
ellipse(c(10,10), cov(t(beta[,2:1000])))
plot(beta[1,],beta[2,])
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .05, col='red')
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .5, col='red')
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .95, col='red')
i=500
y_tilde <- beta[1,2:i] + beta[2,2:i]*10
y_tilde
cavg <- cumsum( y_tilde ) / (1:(i-1))
cvar <- ( cumsum( (y_tilde - cavg)^2) )/( 1:(i-1) )
cvar
cavg2 <- cumsum( y_tilde ) / (1:(i-1))
cvar2 <- ( cumsum( (y_tilde - cavg2)^2) )/( 1:(i-1) )
lwr2 <- cavg2 - sqrt(cvar2)
upr2 <- cavg2 + sqrt(cvar2)
lwr2
upr2
i=1000
y_tilde <- beta[1,2:i] + beta[2,2:i]*10
hist(y_tilde, breaks=50)
abline(v=10 + 10*10, col='red')
cavg2 <- cumsum( y_tilde ) / (1:(i-1))
cvar2 <- ( cumsum( (y_tilde - cavg2)^2) )/( 1:(i-1) )
lwr2 <- cavg2 - sqrt(cvar2)
upr2 <- cavg2 + sqrt(cvar2)
lwr2
upr2
sqrt(10)
lwr2 <- cavg2 - sqrt(cvar2)
upr2 <- cavg2 + sqrt(cvar2)
plot(lwr)
plot(lwr2)
lines(upr2)
points(lwr2)
plot(lwr2)
plot(upr2)
plot(lwr2)
lines(lwr2)
plot(upr2)
lines(lwr2)
lines(cavg)
lines(cavg2)
library(mixtools)
par(mfrow=c(1,3))
beta[,1] <- c(9.5,9.5)
for( i in seq(10, 1000, 10)){
plot(beta[1,2:i], beta[2,2:i], xlab='Iteration, t',
xlim=c(9.5,10.5), ylim=c(9.5,10.5), pch=20,
main='Theta Joint Posterior')
points(10,10, col='red',pch=20)
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .05, col='red',lwd=2)
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .5, col='red',lwd=2)
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .75, col='red',lwd=2)
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .95, col='red',lwd=2)
ellipse(c(10,10), cov(t(beta[,2:1000])),alpha = .25, col='red',lwd=2)
y_tilde <- rnorm(n = i-1,beta[1,2:i] + beta[2,2:i]*10, sqrt(phi[2:i]))
hist(y_tilde, breaks=50)
abline(v=10 + 10*10, col='red')
cavg2 <- cumsum( y_tilde ) / (1:(i-1))
cvar2 <- ( cumsum( (y_tilde - cavg2)^2) )/( 1:(i-1) )
lwr2 <- cavg2 - sqrt(cvar2)
upr2 <- cavg2 + sqrt(cvar2)
plot( cavg, type='l', xlim=c(0,1000), xlab='iteration, t',
ylab='E[exp(theta_1)]', main='Posterior mean of exp(theta_1)',
ylim=c(108,115))
polygon(c(2:i,rev(2:i)),c(lwr2,rev(upr2)),col="gray",border=NA)
lines(cavg2)
abline(h=10 + 10*10, col='red', lwd=1)
}
sqrt(1)
sqrt(2)
